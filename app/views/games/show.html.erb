# encoding: utf-8

<% content_for :title, @game.Name %>

<script type="text/javascript">
	(function() { document.getElementById('main_image').onload=rescaleMainImage;})

	function rescaleMainImage(){
		var img = document.getElementById('main_image');
		if(img.height > img.width) {
			img.height = '100%';
			img.width = 'auto';
		}
	}
	function displayImage(e){
		document.getElementById('main_image').src = e.target.src;

		rescaleMainImage();		
	}
</script>

<script>
	window.requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame ||
                              window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;
	
	var CurrentMoveSpeed = 0;
	var MoveSpeed = 10;
	var DropColor = 'rgb(0,10,0)';
	var BorderColor = ' #E6E1CD';
	var BorderWidth = 2;
	var ThumbMargin = 5;	
	var ScrollPadding = 10;
	var GalleryThumbs = {width:100, height:100};
	var ImageCollection = {};
	var GalleryLocations = {};
	var RiseHeight = 0;
	var RiseLimit = 0;
	var GalleryCanvas;
	var GalleryContext;
	var ControlsCanvas;
	var ControlsContext;
	var HoveredImage = -1; // Defaults to -1
	var ActiveImage = 0;
	
	function resizeGallery(){
		GalleryCanvas.height = ControlsCanvas.height = $("#gallery_div").height();
		GalleryCanvas.width = ControlsCanvas.width = $("#gallery_div").width();
		scaleAndDrawImage(ActiveImage);
	}
		
	function scaleAndDrawImage(iIndex){
		var height = ImageCollection[iIndex].height;
		var width = ImageCollection[iIndex].width;
		var offsetX = 0;
		var offsetY = 0;

		if(height > GalleryCanvas.height){
			width *= GalleryCanvas.height/height;
			height = GalleryCanvas.height;
		}
		
		if(width > GalleryCanvas.width){
			height *= GalleryCanvas.width/width;
			width = GalleryCanvas.width;			
		}
		
		offsetX = (GalleryCanvas.width - width)/2;
		offsetY = (GalleryCanvas.height - height)/2;

		GalleryContext.clearRect(0,0,GalleryCanvas.width,GalleryCanvas.height);
		GalleryContext.drawImage(ImageCollection[iIndex], offsetX, offsetY, width, height);

	}
	
	function populateGallery(){
		resizeGallery();
		scaleAndDrawImage(ActiveImage);
		resizeIndicies(GalleryThumbs.width,GalleryThumbs.height);	
		
		// Context Stuff
		ControlsContext.fillStyle = DropColor;
		ControlsContext.strokeStyle = BorderColor;
		ControlsContext.lineWidth  = BorderWidth;
		
		// Enables the gallery controls.
		ControlsCanvas.addEventListener("mouseover",showIndex,false);
		ControlsCanvas.addEventListener("mouseout",hideIndex,false);
		ControlsCanvas.addEventListener("mousemove",checkMouse,false);
		ControlsCanvas.addEventListener("mousedown",click, false);
	}
	
	function resizeIndicies(w,h){
		var maxHeight = 0;
		var height;
		var width;
		var offsetY;		
		var xCurrent = ThumbMargin;
		
		for(image in ImageCollection){
			height = ImageCollection[image].height;
			width = ImageCollection[image].width;

			if(height > h){
				width *= h/height;
				height = h;
			}
			
			if(width > w){
				height *= w/width;
				width = w;
			}
			
			if(height > maxHeight)
				maxHeight = height;

			GalleryLocations [image] = {x:xCurrent,
										y:h,
										width:width, 
										height:height};
			xCurrent += w + ThumbMargin;			
		}
				
		for(var image in GalleryLocations){
			GalleryLocations[image].y = GalleryCanvas.height;
		}
		
		RiseLimit = maxHeight + 2 * ThumbMargin;

		GalleryThumbs.height = maxHeight;
	}
	
	function checkMouse(e){
		var rect = ControlsCanvas.getBoundingClientRect();
		var x = e.clientX-rect.left;
		var y = e.clientY-rect.top;
		
		HoveredImage = -1;
		for( var bound in GalleryLocations){
			 if((x >= GalleryLocations[bound].x && 
				 x <= GalleryLocations[bound].x + GalleryLocations[bound].width ) &&
				(y >= GalleryLocations[bound].y && 
				 y <= GalleryLocations[bound].y + GalleryLocations[bound].height) )
			{
				HoveredImage = bound
			}
		}
		if(HoveredImage != -1){
			ControlsCanvas.style.cursor = 'pointer';
		}
		else{
			ControlsCanvas.style.cursor = 'default';
		}
	}
	
	function click(){
		if(HoveredImage != -1){
			ActiveImage = HoveredImage;
			scaleAndDrawImage(ActiveImage);
		}
	}
	
	function showIndex(){
		CurrentMoveSpeed = -MoveSpeed;
		animateIndexVertical(window.performance.now());
	}
	
	function hideIndex(){
		CurrentMoveSpeed = MoveSpeed;
		animateIndexVertical(window.performance.now());
	}
	
	function animateIndexVertical(time){
		var exitAnim=false;
		ControlsContext.clearRect(0,0,GalleryCanvas.width,GalleryCanvas.height);
		
		RiseHeight -= CurrentMoveSpeed;

		if(RiseHeight > RiseLimit){
			RiseHeight = RiseLimit;
		}
		else if( RiseHeight < 0)
			RiseHeight = 0;
		

		ControlsContext.fillRect(0,GalleryCanvas.height, GalleryCanvas.width, -RiseHeight);
		
		for(image in ImageCollection)
		{
			ControlsContext.drawImage(ImageCollection[image], 
								GalleryLocations[image].x, 
								GalleryLocations[image].y,
								GalleryLocations[image].width, 
								GalleryLocations[image].height);
								

			ControlsContext.strokeRect(GalleryLocations[image].x, 
								GalleryLocations[image].y,
								GalleryLocations[image].width, 
								GalleryLocations[image].height);
								
			GalleryLocations[image].y += CurrentMoveSpeed;
			
			if(GalleryLocations[image].y < GalleryCanvas.height - (ThumbMargin + GalleryLocations[image].height)){
				GalleryLocations[image].y = GalleryCanvas.height - (ThumbMargin + GalleryLocations[image].height);
				exitAnim = true;
				RiseHeight = RiseHeight < RiseLimit ? RiseLimit : RiseHeight;
				
			}
			else if(GalleryLocations[image].y > GalleryCanvas.height){
				GalleryLocations[image].y = GalleryCanvas.height;
				exitAnim = true;
				ControlsContext.clearRect(0,0,GalleryCanvas.width,GalleryCanvas.height);
			}
		}
		
		if(exitAnim){
			if(CurrentMoveSpeed > 10)
				ControlsContext.clearRect(0,0,GalleryCanvas.width,GalleryCanvas.height);
				
			CurrentMoveSpeed = 0;		
			return;
		}
		else {
			window.requestAnimationFrame(animateIndexVertical);		
		}
	}
	
	function animateIndexHorizontal(){
	
	}
	
	function loadImages(source){
		var sources = JSON.parse(source);
		var loadedImages = 0;		

		GalleryCanvas = document.getElementById("image_gallery");
		ControlsCanvas = document.getElementById("gallery_controls");

		if(sources.length < 1) {
			ControlsCanvas.height = GalleryCanvas.height = 0;
			ControlsCanvas.width = GalleryCanvas.width = 0;
			return;
		}
		
		GalleryCanvas.style.width ='100%';
		GalleryCanvas.style.height='100%';
		ControlsCanvas.style.width ='100%';
		ControlsCanvas.style.height='100%';
		
		GalleryContext = GalleryCanvas.getContext('2d');
		ControlsContext = ControlsCanvas.getContext('2d');
		
		for(var iIndex = 0;iIndex< sources.length; iIndex++  ){
			ImageCollection[iIndex] = new Image();
			ImageCollection[iIndex].onload = function(){
				if(++loadedImages === sources.length)
					populateGallery();
			};
			ImageCollection[iIndex].src = sources[iIndex];
		}
	}
	
	window.onload = function(){
		updateSidebar();
		loadImages("<%=glob_asset_dir(@game.Images)%>".replace(/&quot;/g,'"'));
	};
	
	
	$(window).resize(function(){
		updateSidebar();
		resizeGallery();
	});
</script>

<div class="project_header">					
	<div class="title project_title"><%= @game.Name %></div>
</div>

<!--- HTML 5 --->	
<div class="gallery_spacer">
	<div id="gallery_div" class="gallery_div">
			<canvas id="image_gallery" class="gallery" tabindex="0" >  </canvas>
			<canvas id="gallery_controls" class="gallery controls" tabindex="0">  </canvas>
	</div>
</div>

<div class="summary">
	<table>
		<tr><td>Project Type:</td> <td><%=raw @game.Type %></td></tr>
		<tr><td>Platform:</td> <td><%=raw @game.Platform %></td></tr>
		<tr><td>Team:</td> <td><%=raw @game.Team %></td></tr>
		<tr><td>Date:</td> <td><%=raw @game.Date %></td></tr>
		<tr><td><%=raw @game.Links %></td></tr>
	</table>
	<h2>Description:</h2>
	<div class="description"><p><%=raw @game.Description %></p></div>
	
	<h2>What I did:</h2>
	<div class="done"><ul><%=raw @game.Done %></ul></div>
	</td></tr>	 
</div>

</div>

